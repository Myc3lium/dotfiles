#!/bin/sh

normal="$(tput sgr0)"
objects="$(tput setaf 2)"
error="$(tput setaf 3)"
names="$(tput setaf 4)"
suggestions="$(tput setab 1; tput setaf 8)"
comments="$(tput setaf 8; tput sitm)"
keywords="$(tput setaf 6; tput bold)"
operators="$(tput setaf 6; tput sitm)"

underline="$(tput smul)"
nunderline="$(tput rmul)"

join(){
	awk '{printf $0}' <<ENDSED
        1p;
        1d;
	    s/^/${normal}/g;
	    s/$/${normal}/g;

        s/interactive/${error}interactive${normal}/g;
        s/no location info/${error}no location info${normal}/g;
        s/Infinity/${error}Infinity${normal}/g;
        s/Non type-variable argument/${error}Non type-variable argument${normal}/g;
        s/Not in scope/${error}Not in scope${normal}/g;
        s/No instance/${error}No instance${normal}/g;
        s/No explicit implementation/${error}No explicit implementation${normal}/g;
        s/Cannot derive well-kinded instance/${error}Cannot derive well-kinded instance${normal}/g;
        s/Can't make a derived instance/${error}Can't make a derived instance${normal}/g;
        s/Couldn't match expected type/${error}Couldn't match expected type${normal}/g;
        s/parse error/${error}parse error${normal}/g;

        s/In an equation for/${objects}In an equation for${normal}/g;
        s/In the data declaration/${objects}In the data declaration${normal}/g;
        s/In the instance declaration/${objects}In the instance declaration${normal}/g;

        s/data constructor/${objects}data constructor${normal}/g;
        s/type constructor/${objects}type constructor${normal}/g;
        s/type signature/${objects}type constructor${normal}/g;
        s/type variable/${objects}type variable${normal}/g;

        s/‘/${names}‘/g;
        s/’/’${normal}/g;

        s/(maybe you /(${suggestions}maybe you /g;
        s/?)/?${normal})/g;
        s/(Use /(Use ${suggestions}/g;
        s/ to permit this)/${normal} to permit this)/g;
        s/Could not find module/${suggestions}Could not find module${normal}/g;
        s/lacks an accompanying binding/${suggestions}lacks an accompanying binding${normal}/g;
        s/expects an argument/${suggestions}expects an argument${normal}/g;
        s/is not a derivable class/${suggestions}is not a derivable class${normal}/g;
        s/In the expression: /${objects}In the expression: ${suggestions}/g;
        s/in the constraint: /in the constraint: ${suggestions}/g;
        s/it :: /it :: ${suggestions}/g;
        s/Relevant bindings include/${suggestions}Relevant bindings include${normal}/g;

        s/-- /${comments}-- /g;

        s/where/${keywords}where${normal}/g;
        s/forall/${keywords}forall${normal}/g;

        s/instance/${keywords}instance${normal}/g;
        s/class/${keywords}class${normal}/g;

        s/data/${keywords}data${normal}/g;
        s/newtype/${keywords}newtype${normal}/g;
        s/type/${keywords}type${normal}/g;

        s/Data\./${underline}Data${nunderline}./g;
        s/GHC\./${underline}GHC${nunderline}./g;
        s/Control\./${underline}Control${nunderline}./g;
        s/Generics\./${underline}Generics${nunderline}./g;
        s/System\./${underline}System${nunderline}./g;
        s/Text\./${underline}Text${nunderline}./g;
        s/Prelude\./${underline}Prelude${nunderline}./g;

        s/::/${operators}::${normal}/g;
        s/\=>/${operators}=>${normal}/g;
        s/->/${operators}->${normal}/g;
ENDSED
}

# s/data\s\+\([A-Z]\w\+\)/${keywords}data ${typename}\1${normal}/g;
# s/newtype\s\+\([A-Z]\w\+\)/${keywords}newtype ${typename}\1${normal}/g;
# s/type\s\+\([A-Z]\w\+\)/${keywords}type ${typename}\1${normal}/g;

if [ $# -eq 0 ]; then
	/usr/bin/ghci 2>&1 | sed "$(join)"
else
    eval "/usr/bin/ghc $*"
fi
